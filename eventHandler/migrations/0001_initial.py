# Generated by Django 4.1.4 on 2023-01-30 22:31

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='Account',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('birthday_date', models.DateField(blank=True, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='user')),
                ('gto_id', models.IntegerField(blank=True, null=True, unique=True)),
            ],
            options={
                'db_table': 'Account',
                'managed': True,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='City',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
            ],
            options={
                'db_table': 'City',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Organization',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=1000)),
            ],
            options={
                'db_table': 'Organization',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SportObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=45, null=True)),
                ('address', models.CharField(blank=True, max_length=45, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='sportObject')),
                ('city', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.city')),
            ],
            options={
                'db_table': 'sport_object',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SportsmanSportTypeEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'sportsman_sport_type_event',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SportType',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=45, null=True)),
                ('custom', models.IntegerField(blank=True, choices=[(0, 'Да'), (1, 'Нет')], default=1, null=True)),
                ('for_who', models.IntegerField(blank=True, choices=[(0, 'только Женщины'), (1, 'только Мужчины'), (2, 'Все')], default=2, null=True)),
                ('teamable', models.IntegerField(blank=True, choices=[(0, 'Да'), (1, 'Нет')], default=1, null=True)),
                ('age_max', models.IntegerField(blank=True, null=True)),
                ('age_min', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'sport_type',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='SportTypeEvent',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField(blank=True, null=True)),
                ('time', models.TimeField(blank=True, null=True)),
                ('sport_object', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.sportobject')),
                ('sport_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.sporttype')),
                ('sportsmans', models.ManyToManyField(null=True, related_name='sportsmans', through='eventHandler.SportsmanSportTypeEvent', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'sport_type_event',
                'managed': True,
                'unique_together': {('id', 'sport_type', 'sport_object')},
            },
        ),
        migrations.CreateModel(
            name='Team',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
            ],
            options={
                'db_table': 'team',
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Sport_type_in_sport_object',
            fields=[
                ('sport_object', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='eventHandler.sportobject')),
                ('sport_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.sporttype')),
            ],
            options={
                'db_table': 'Sport_type_in_sport_object',
                'managed': True,
                'unique_together': {('sport_object', 'sport_type')},
            },
        ),
        migrations.AddField(
            model_name='sportsmansporttypeevent',
            name='sport_type_event',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.sporttypeevent'),
        ),
        migrations.AddField(
            model_name='sportsmansporttypeevent',
            name='sportsman',
            field=models.ForeignKey(db_column='sportsman', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='sportsmansporttypeevent',
            name='team',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.team'),
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('age_max', models.IntegerField(blank=True, default=120, null=True)),
                ('age_min', models.IntegerField(blank=True, default=0, null=True)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('status', models.IntegerField(blank=True, choices=[(0, 'Планируется'), (1, 'Проводится'), (2, 'Подводятся итоги'), (3, 'Завершенно')], default=0, null=True)),
                ('photo', models.ImageField(blank=True, null=True, upload_to='event')),
                ('owner', models.ForeignKey(db_column='owner', on_delete=django.db.models.deletion.DO_NOTHING, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'db_table': 'event',
                'managed': True,
            },
        ),
        migrations.AddField(
            model_name='account',
            name='city',
            field=models.ForeignKey(blank=True, db_column='city', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.city'),
        ),
        migrations.AddField(
            model_name='account',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='account',
            name='organization',
            field=models.ForeignKey(blank=True, db_column='organization', null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.organization'),
        ),
        migrations.AddField(
            model_name='account',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='Standards',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.TimeField(blank=True, null=True)),
                ('count', models.IntegerField(blank=True, null=True)),
                ('points', models.IntegerField(blank=True, null=True)),
                ('sport_type', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.sporttype')),
            ],
            options={
                'db_table': 'Standards',
                'managed': True,
                'unique_together': {('sport_type', 'points')},
            },
        ),
        migrations.CreateModel(
            name='SportTypeEventHasEvent',
            fields=[
                ('sport_type_event', models.OneToOneField(on_delete=django.db.models.deletion.DO_NOTHING, primary_key=True, serialize=False, to='eventHandler.sporttypeevent')),
                ('event', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='eventHandler.event')),
            ],
            options={
                'db_table': 'sport_type_event_has_event',
                'managed': True,
                'unique_together': {('sport_type_event', 'event')},
            },
        ),
        migrations.AlterUniqueTogether(
            name='sportsmansporttypeevent',
            unique_together={('team', 'sportsman', 'sport_type_event')},
        ),
        migrations.AddField(
            model_name='sportobject',
            name='sport_type',
            field=models.ManyToManyField(null=True, related_name='sport_in_object', through='eventHandler.Sport_type_in_sport_object', to='eventHandler.sporttype'),
        ),
        migrations.AddField(
            model_name='event',
            name='settings',
            field=models.ManyToManyField(related_name='settings', through='eventHandler.SportTypeEventHasEvent', to='eventHandler.sporttypeevent'),
        ),
        migrations.AlterUniqueTogether(
            name='event',
            unique_together={('id', 'owner')},
        ),
    ]
